{
  inputs,
  flake-parts-lib,
  ...
}: {
  imports = [
    inputs.flake-parts.flakeModules.flakeModules
  ];
  flake.flakeModules.docker-compose = {
    options.perSystem = flake-parts-lib.mkPerSystemOption ({
      lib,
      pkgs,
      config,
      ...
    }: let
      inherit (lib) types mkOption;
      inherit (import ./utils.nix {inherit lib pkgs;}) serviceType;

      yamlFormat = pkgs.formats.yaml {};
    in {
      imports = [
        {
          options.snowblower.docker-compose.services = mkOption {
            type = types.submoduleWith {
              modules = [{freeformType = types.attrsOf serviceType;}];
              specialArgs = {inherit pkgs;};
            };
            default = {};
            description = ''
              The services that are available to docker-compose
            '';
          };
        }
      ];

      options.snowblower.docker-compose = {
        fileName = mkOption {
          type = types.str;
          default = "docker-compose.yml";
          description = ''
            The name of the docker-compose file generated by this module.
          '';
        };
      };

      config.snowblower = {
        packages = [
          pkgs.docker-compose
        ];

        shell = {
          startup = let
            # Extract service configurations
            composeServices =
              lib.mapAttrs (_name: service: service.outputs.service)
              config.snowblower.docker-compose.services;

            # Extract networks from services
            serviceNetworks = lib.unique (lib.flatten (
              lib.mapAttrsToList (
                _name: service:
                  if service.enable && service.networks != []
                  then service.networks
                  else []
              )
              config.snowblower.docker-compose.services
            ));

            # Create networks configuration
            networksConfig = lib.listToAttrs (map (name: {
                inherit name;
                value = {};
              })
              serviceNetworks);

            # Create the compose configuration
            composeConfig =
              {
                services = composeServices;
              }
              // lib.optionalAttrs (serviceNetworks != []) {
                networks = networksConfig;
              };

            composeFile = yamlFormat.generate config.snowblower.docker-compose.fileName composeConfig;
          in [
            ''
              cp -f ${builtins.toString composeFile} ./${config.snowblower.docker-compose.fileName}
            ''
          ];
        };
      };
    });
  };
}
