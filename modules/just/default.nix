{flake-parts-lib, ...}: {
  options.perSystem = flake-parts-lib.mkPerSystemOption ({
    lib,
    pkgs,
    config,
    ...
  }: let
    inherit (lib) types mkOption;

    recipeModule = {
      imports = [./recipe-module.nix];
      config._module.args = {inherit pkgs;};
    };
    recipeType = types.submodule recipeModule;
  in {
    imports = [
      {
        options.snowblower.just.recipes = mkOption {
          type = types.submoduleWith {
            modules = [{freeformType = types.attrsOf recipeType;}];
            specialArgs = {inherit pkgs;};
          };
          default = {};
          description = ''
            The recipes that are avaliable to just
          '';
        };
      }
    ];

    options.snowblower.just = {
      package = mkOption {
        type = types.package;
        default = pkgs.just;
        defaultText = lib.literalExpression "pkgs.just";
        description = "The just package to use.";
      };

      commonFileName = mkOption {
        type = types.str;
        default = "justfile";
        description = ''
          The name of the common justfile generated by this module.
        '';
      };
    };

    config.snowblower = {
      dependencies.shell = [
        config.snowblower.just.package
      ];

      file."${config.snowblower.just.commonFileName}" = {
        enable = true;
        text =
          lib.concatStringsSep "\n"
          (lib.mapAttrsToList (_name: recipe: recipe.justfile) config.snowblower.just.recipes);
      };
    };
  });
}
